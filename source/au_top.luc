module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    
    
    output io_led [3][8],   // LEDs on IO Shield  // LEDs on IO Shield, 3 outputs connected to pins 15,16,17 from FPGA (inputs Cin, A, B into Full Adder)
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield up-0,centre-1, bottom-2, left-3, right-4
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  sig a[16];
  sig b[16];
  sig alufn[6];
  sig rst;                  // reset signal
   
  alu alu;
  alufn_counter alufn_count;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    dff aVal[16];
    dff bVal[16];
    
    .rst(rst) {
      multi_seven_seg seg;
      delayer delayer;
      fsm state = {MANUAL, AUTO,BMANAUL,AUTOSTART,COMPMANUAL};
      
    }
  }

  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = ~seg.seg;          // connect segment to driver
    io_sel = ~seg.sel;           // connect digit to driver
    seg.values = {4h0,4h0,4h0,4h0}; // 4digits default seven seg display
    
    
    
    //INITIALIZE VALUES TO 0
    a = 16b0;
    b = 16b0;
    alu.a =a;
    alu.b =b;
    //ALUFN COUNTER INITIALIZE 0 
    alufn_count.count = 4b0;

    
    //ALUFN connected to dips
    alufn[5:0] = io_dip[2][5:0];
    //io_dip[2][5:0] = alufn[5:0];
    alu.alufn = alufn_count.alufn;

      

    case (state.q) {
      state.MANUAL:
        //displays A
        seg.values={4hc,4h0,4h0,4h0};
        io_led[0] = io_dip[0];
        io_led[1] = io_dip[1];
        
        a[7:0] = io_dip[0];
        a[15:8] = io_dip[1];
        if(io_button[1]){
          aVal.d=a;
          state.d = state.BMANAUL;
        }
        if(io_dip[2][7]){
          state.d = state.AUTO;
        }
        
      state.BMANAUL:
        //displays B
        seg.values={4he,4h0,4h0,4h0};
        io_led[0] = io_dip[0];
        io_led[1] = io_dip[1];
        
        b[7:0] = io_dip[0];
        b[15:8] = io_dip[1];
        if(io_button[3]){
          bVal.d = b;
          state.d = state.COMPMANUAL;
        }
        
      state.COMPMANUAL:
        //displays c
        seg.values={4hf,4h0,4h0,4h0};
        //display the results
        alu.a = aVal.q;
        alu.b = bVal.q;
        io_led[0] = alu.alu[7:0];
        io_led[1] = alu.alu[15:8];
        alufn = io_dip[2][5:0];
        io_led[2][5:0] = alufn[5:0];
        alu.alufn = alufn;
        
        case (alufn[5:0]) {
          6h00: seg.values={4hf,4hc,4h0,4h1}; //addition
          6h01: seg.values={4hf,4hc,4h0,4h2}; //subtraction 
          6h02: seg.values={4hf,4hc,4h0,4h3}; //multiplication
          6h04: seg.values={4hf,4hc,4h0,4h4}; //division 
          6h08: seg.values={4hf,4hc,4h0,4h5}; //negate 
          6h18: seg.values={4hf,4hc,4h0,4h6}; // and
          6h1e: seg.values={4hf,4hc,4h0,4h7}; // or
          6h16: seg.values={4hf,4hc,4h0,4h8}; // xor
          6h1a: seg.values={4hf,4hc,4h0,4h9}; // "A"
          6h20: seg.values={4hf,4hc,4h1,4h0}; //shl
          6h21: seg.values={4hf,4hc,4h1,4h1}; //shr
          6h23: seg.values={4hf,4hc,4h1,4h2}; //sra
          6h33: seg.values={4hf,4hc,4h1,4h3}; //compare equals
          6h35: seg.values={4hf,4hc,4h1,4h4}; // compare less than 
          6h37: seg.values={4hf,4hc,4h1,4h5}; //compare less than equals
          
         //displays "AE00" for unknown alufn signal
          default: seg.values={4hc,4ha,4h0,4h0}; // default error unknown alufn
    }
        
        //displays "OF00" for overflow
        if(alu.v) {
          seg.values={4h0,4hd,4h0,4h0};
        }
        
        //display "UE00" for undefined value (division by 0) 
        if(alufn== 6b000100 & bVal.q == 0){
          seg.values = {4ha, 4hb, 4h0, 4h0};
        }        
        
        
        if(io_button[4]){
          aVal.d=0;
          bVal.d=0;
          a=0;
          b=0;
          state.d = state.MANUAL;
        }
        
      state.AUTO:
        //displays AA
        seg.values={4hc,4hc,4h0,4h0};
        //led 
        
        //led for io dips
        io_led[0] = io_dip[0];
        io_led[1] = io_dip[1];

          
        
        //START AUTO TESSTING
        if(io_button[1]){
          aVal.d=a;
          state.d = state.AUTOSTART;
        }
        // GO MANUAL
        if(!io_dip[2][7]){
          state.d = state.MANUAL;
        }
        
      state.AUTOSTART:
        //GO TO MANUAL
        if(!io_dip[2][7]){
          state.d = state.MANUAL;
        }
       
        //TEST CASE 1: NO ERROR 
        // A = 16b0000000000000010 (2) , B = 16b0000000000000001 (1)
        // ADD = 16b0000000000000011 (3) , SUB = 16b0000000000000001 (1)
        // MULTI = 16b0000000000000010 (2) , DIV = 16b0000000000000010 (2)
        // NEG(A) = 16b1111111111111110 (-2)
        // CMPEQ = 16b0 , CMPLT = 16b0 , CMPLE = 16b0
        // SHL = 16b0000000000000100 (4) , SHR = 16b0000000000000001 (1), SRA = 16b0000000000000001 (1)
        // AND = 16b0 , OR = 16b0000000000000011 (3) , XOR = 16b0000000000000011 (3) , "A" = 16b0000000000000010 (2)
                
        if(io_dip[0][0]){
          a=16b0000000000000010;
          b=16b0000000000000001;
          alu.a = a;
          alu.b = b;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          //increasing alufn values
          alufn_count.count = delayer.value;
          //connect to led alufn
          io_led[2][5:0] = alufn_count.alufn;
          //set alufn to alufn counter values
          alufn[5:0] = alufn_count.alufn[5:0];
          alu.alufn = alufn;
        }
                                               
        // TEST CASE 2: ADDITION OVERFLOW 
        // A = 16b0111111111111111 (32767), B = 16b0111111111111111 (32767)
        // ADD = 17b01111111111111110 (65534) 
                
        if(io_dip[0][1]){
          a=16b0111111111111111;
          b=16b0111111111111111;
          alu.a = a;
          alu.b = b;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          //increasing alufn values
          alufn_count.count = delayer.value;
          //connect to led alufn
          io_led[2][5:0] = alufn_count.alufn;
          //set alufn to alufn counter values
          alufn[5:0] = alufn_count.alufn[5:0];
          alu.alufn = alufn;
          
        }
        
        //TEST CASE 3: DIVISION BY 0 
        // A =16b0000000000000001 (1), B=16b0000000000000000 (0)
        // DIV = UNDEFINED ERROR
                
        if(io_dip[0][2]){
          a=16b0000000000000001;
          b=16b0000000000000000;
          alu.a = a;
          alu.b = b;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          //increasing alufn values
          alufn_count.count = delayer.value;
          //connect to led alufn
          io_led[2][5:0] = alufn_count.alufn;
          //set alufn to alufn counter values
          alufn[5:0] = alufn_count.alufn[5:0];
          alu.alufn = alufn;
        }
        
        //TEST CASE 4: MULTIPLICATION (OVERFLOW)
        // A =16b0000010000000000 (1024), B=16b0000010000000000 (1024)
        // MULTI = 21b100000000000000000000 (1048576)  
                
        if(io_dip[0][3]){
          a=16b0000010000000000;
          b=16b0000010000000000;
          alu.a = a;
          alu.b = b;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          //increasing alufn values
          alufn_count.count = delayer.value;
          //connect to led alufn
          io_led[2][5:0] = alufn_count.alufn;
          //set alufn to alufn counter values
          alufn[5:0] = alufn_count.alufn[5:0];
          alu.alufn = alufn;
          }
        
        //TEST CASE 5: NEGATIVE MULTIPLICATION
        // A =16b1111111111111110 (-2), B=16b0000000000000010 (2)
        // MULTI = 16b1111111111111100 (-4)  
                
        if(io_dip[0][4]){
          a=16b1111111111111110;
          b=16b0000000000000010;
          alu.a = a;
          alu.b = b;
          io_led[0] = alu.alu[7:0];
          io_led[1] = alu.alu[15:8];
          //increasing alufn values
          alufn_count.count = delayer.value;
          //connect to led alufn
          io_led[2][5:0] = alufn_count.alufn;
          //set alufn to alufn counter values
          alufn[5:0] = alufn_count.alufn[5:0];
          alu.alufn = alufn;
          }
        
         case (alufn[5:0]) {
          6h00: seg.values={4hf,4hc,4h0,4h1}; //addition
          6h01: seg.values={4hf,4hc,4h0,4h2};//subtraction 
          6h02: seg.values={4hf,4hc,4h0,4h3};//multiplication
          6h04: seg.values={4hf,4hc,4h0,4h4};//division 
          6h08: seg.values={4hf,4hc,4h0,4h5}; //negate 
          6h18: seg.values={4hf,4hc,4h0,4h6}; // and
          6h1e: seg.values={4hf,4hc,4h0,4h7}; // or
          6h16: seg.values={4hf,4hc,4h0,4h8}; //xor
          6h1a: seg.values={4hf,4hc,4h0,4h9}; // "A"
          6h20: seg.values={4hf,4hc,4h1,4h0}; //shl
          6h21: seg.values={4hf,4hc,4h1,4h1}; //shr
          6h23: seg.values={4hf,4hc,4h1,4h2}; //sra
          6h33: seg.values={4hf,4hc,4h1,4h3}; //compare equals
          6h35: seg.values={4hf,4hc,4h1,4h4}; // compare less than 
          6h37: seg.values={4hf,4hc,4h1,4h5}; //compare less than equals
         
         
          default: seg.values={4hb,4hc,4h0,4h0}; // default error unknown alufn
      }
        
        //increasing alufn values
        alufn_count.count = delayer.value;
        //connect to led alufn
        io_led[2][5:0] = alufn_count.alufn;
        //set alufn to alufn counter values
        alufn[5:0] = alufn_count.alufn[5:0];
        alu.alufn = alufn;
        
        
        alufn[5:0] = alufn_count.alufn[5:0];
        //center button
        if(io_button[2]){
          aVal.d=0;
          bVal.d=0;
          a=0;
          b=0;
          state.d = state.AUTO;
        }

  }
}
