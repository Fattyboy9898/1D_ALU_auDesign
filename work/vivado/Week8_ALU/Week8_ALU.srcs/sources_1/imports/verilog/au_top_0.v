/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg [15:0] a;
  
  reg [15:0] b;
  
  reg [5:0] alufn;
  
  reg rst;
  
  wire [16-1:0] M_alu_alu;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  reg [6-1:0] M_alu_alufn;
  alu_1 alu (
    .a(M_alu_a),
    .b(M_alu_b),
    .alufn(M_alu_alufn),
    .alu(M_alu_alu),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [6-1:0] M_alufn_count_alufn;
  reg [4-1:0] M_alufn_count_count;
  alufn_counter_2 alufn_count (
    .count(M_alufn_count_count),
    .alufn(M_alufn_count_alufn)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_3 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [15:0] M_aVal_d, M_aVal_q = 1'h0;
  reg [15:0] M_bVal_d, M_bVal_q = 1'h0;
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_4 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [4-1:0] M_delayer_value;
  delayer_5 delayer (
    .clk(clk),
    .rst(rst),
    .value(M_delayer_value)
  );
  localparam MANUAL_state = 3'd0;
  localparam AUTO_state = 3'd1;
  localparam BMANAUL_state = 3'd2;
  localparam AUTOSTART_state = 3'd3;
  localparam COMPMANUAL_state = 3'd4;
  
  reg [2:0] M_state_d, M_state_q = MANUAL_state;
  
  always @* begin
    M_state_d = M_state_q;
    M_bVal_d = M_bVal_q;
    M_aVal_d = M_aVal_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    usb_tx = usb_rx;
    io_led = 24'h000000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    M_seg_values = 16'h0000;
    a = 16'h0000;
    b = 16'h0000;
    M_alu_a = a;
    M_alu_b = b;
    M_alufn_count_count = 4'h0;
    alufn[0+5-:6] = io_dip[16+0+5-:6];
    M_alu_alufn = M_alufn_count_alufn;
    
    case (M_state_q)
      MANUAL_state: begin
        M_seg_values = 16'hc000;
        io_led[0+7-:8] = io_dip[0+7-:8];
        io_led[8+7-:8] = io_dip[8+7-:8];
        a[0+7-:8] = io_dip[0+7-:8];
        a[8+7-:8] = io_dip[8+7-:8];
        if (io_button[1+0-:1]) begin
          M_aVal_d = a;
          M_state_d = BMANAUL_state;
        end
        if (io_dip[16+7+0-:1]) begin
          M_state_d = AUTO_state;
        end
      end
      BMANAUL_state: begin
        M_seg_values = 16'he000;
        io_led[0+7-:8] = io_dip[0+7-:8];
        io_led[8+7-:8] = io_dip[8+7-:8];
        b[0+7-:8] = io_dip[0+7-:8];
        b[8+7-:8] = io_dip[8+7-:8];
        if (io_button[3+0-:1]) begin
          M_bVal_d = b;
          M_state_d = COMPMANUAL_state;
        end
      end
      COMPMANUAL_state: begin
        M_seg_values = 16'hf000;
        M_alu_a = M_aVal_q;
        M_alu_b = M_bVal_q;
        io_led[0+7-:8] = M_alu_alu[0+7-:8];
        io_led[8+7-:8] = M_alu_alu[8+7-:8];
        alufn = io_dip[16+0+5-:6];
        io_led[16+0+5-:6] = alufn[0+5-:6];
        M_alu_alufn = alufn;
        
        case (alufn[0+5-:6])
          6'h00: begin
            M_seg_values = 16'hfc01;
          end
          6'h01: begin
            M_seg_values = 16'hfc02;
          end
          6'h02: begin
            M_seg_values = 16'hfc03;
          end
          6'h04: begin
            M_seg_values = 16'hf004;
          end
          6'h08: begin
            M_seg_values = 16'hf005;
          end
          6'h18: begin
            M_seg_values = 16'hfc06;
          end
          6'h1e: begin
            M_seg_values = 16'hfc07;
          end
          6'h16: begin
            M_seg_values = 16'hfc08;
          end
          6'h1a: begin
            M_seg_values = 16'hfc09;
          end
          6'h20: begin
            M_seg_values = 16'hfc10;
          end
          6'h21: begin
            M_seg_values = 16'hfc11;
          end
          6'h23: begin
            M_seg_values = 16'hfc12;
          end
          6'h33: begin
            M_seg_values = 16'hfc13;
          end
          6'h35: begin
            M_seg_values = 16'hfc14;
          end
          6'h37: begin
            M_seg_values = 16'hfc15;
          end
          default: begin
            M_seg_values = 16'hca00;
          end
        endcase
        if (M_alu_v) begin
          M_seg_values = 16'h0d00;
        end
        if (alufn == 6'h04 & M_bVal_q == 1'h0) begin
          M_seg_values = 16'hab00;
        end
        if (io_button[4+0-:1]) begin
          M_aVal_d = 1'h0;
          M_bVal_d = 1'h0;
          a = 1'h0;
          b = 1'h0;
          M_state_d = MANUAL_state;
        end
      end
      AUTO_state: begin
        M_seg_values = 16'hcc00;
        io_led[0+7-:8] = io_dip[0+7-:8];
        io_led[8+7-:8] = io_dip[8+7-:8];
        if (io_button[1+0-:1]) begin
          M_aVal_d = a;
          M_state_d = AUTOSTART_state;
        end
        if (!io_dip[16+7+0-:1]) begin
          M_state_d = MANUAL_state;
        end
      end
      AUTOSTART_state: begin
        if (!io_dip[16+7+0-:1]) begin
          M_state_d = MANUAL_state;
        end
        if (io_dip[0+0+0-:1]) begin
          a = 16'h0002;
          b = 16'h0001;
          M_alu_a = a;
          M_alu_b = b;
          io_led[0+7-:8] = M_alu_alu[0+7-:8];
          io_led[8+7-:8] = M_alu_alu[8+7-:8];
          M_alufn_count_count = M_delayer_value;
          io_led[16+0+5-:6] = M_alufn_count_alufn;
          alufn[0+5-:6] = M_alufn_count_alufn[0+5-:6];
          M_alu_alufn = alufn;
        end
        if (io_dip[0+1+0-:1]) begin
          a = 16'h7fff;
          b = 16'h7fff;
          M_alu_a = a;
          M_alu_b = b;
          io_led[0+7-:8] = M_alu_alu[0+7-:8];
          io_led[8+7-:8] = M_alu_alu[8+7-:8];
          M_alufn_count_count = M_delayer_value;
          io_led[16+0+5-:6] = M_alufn_count_alufn;
          alufn[0+5-:6] = M_alufn_count_alufn[0+5-:6];
          M_alu_alufn = alufn;
        end
        if (io_dip[0+2+0-:1]) begin
          a = 16'h0001;
          b = 16'h0000;
          M_alu_a = a;
          M_alu_b = b;
          io_led[0+7-:8] = M_alu_alu[0+7-:8];
          io_led[8+7-:8] = M_alu_alu[8+7-:8];
          M_alufn_count_count = M_delayer_value;
          io_led[16+0+5-:6] = M_alufn_count_alufn;
          alufn[0+5-:6] = M_alufn_count_alufn[0+5-:6];
          M_alu_alufn = alufn;
        end
        if (io_dip[0+3+0-:1]) begin
          a = 16'h0400;
          b = 16'h0400;
          M_alu_a = a;
          M_alu_b = b;
          io_led[0+7-:8] = M_alu_alu[0+7-:8];
          io_led[8+7-:8] = M_alu_alu[8+7-:8];
          M_alufn_count_count = M_delayer_value;
          io_led[16+0+5-:6] = M_alufn_count_alufn;
          alufn[0+5-:6] = M_alufn_count_alufn[0+5-:6];
          M_alu_alufn = alufn;
        end
        if (io_dip[0+4+0-:1]) begin
          a = 16'hfffe;
          b = 16'h0002;
          M_alu_a = a;
          M_alu_b = b;
          io_led[0+7-:8] = M_alu_alu[0+7-:8];
          io_led[8+7-:8] = M_alu_alu[8+7-:8];
          M_alufn_count_count = M_delayer_value;
          io_led[16+0+5-:6] = M_alufn_count_alufn;
          alufn[0+5-:6] = M_alufn_count_alufn[0+5-:6];
          M_alu_alufn = alufn;
        end
        
        case (alufn[0+5-:6])
          6'h00: begin
            M_seg_values = 16'hfc01;
          end
          6'h01: begin
            M_seg_values = 16'hfc02;
          end
          6'h02: begin
            M_seg_values = 16'hfc03;
          end
          6'h04: begin
            M_seg_values = 16'hf004;
          end
          6'h08: begin
            M_seg_values = 16'hf005;
          end
          6'h18: begin
            M_seg_values = 16'hfc06;
          end
          6'h1e: begin
            M_seg_values = 16'hfc07;
          end
          6'h16: begin
            M_seg_values = 16'hfc08;
          end
          6'h1a: begin
            M_seg_values = 16'hfc09;
          end
          6'h20: begin
            M_seg_values = 16'hfc10;
          end
          6'h21: begin
            M_seg_values = 16'hfc11;
          end
          6'h23: begin
            M_seg_values = 16'hfc12;
          end
          6'h33: begin
            M_seg_values = 16'hfc13;
          end
          6'h35: begin
            M_seg_values = 16'hfc14;
          end
          6'h37: begin
            M_seg_values = 16'hfc15;
          end
          default: begin
            M_seg_values = 16'hbc00;
          end
        endcase
        M_alufn_count_count = M_delayer_value;
        io_led[16+0+5-:6] = M_alufn_count_alufn;
        alufn[0+5-:6] = M_alufn_count_alufn[0+5-:6];
        M_alu_alufn = alufn;
        alufn[0+5-:6] = M_alufn_count_alufn[0+5-:6];
        if (io_button[2+0-:1]) begin
          M_aVal_d = 1'h0;
          M_bVal_d = 1'h0;
          a = 1'h0;
          b = 1'h0;
          M_state_d = AUTO_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    M_aVal_q <= M_aVal_d;
    M_bVal_q <= M_bVal_d;
    
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
endmodule
